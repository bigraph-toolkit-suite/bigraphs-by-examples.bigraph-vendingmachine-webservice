// There are three possibilities to refill coffee
signature Sig {
	VM: 0
	Button1: 0
	Button2: 0
	PHD: 0
	Wallet: 0
	Tresor: 0
	atomic Coin: 1
	atomic Pressed: 0
	atomic Coffee: 0
	atomic Tea: 0
	Container: 0
}

main = {
    val system(Sig) = { $student | $vendingMachine }
    // export($system, as=png, resourcePath="file:src/test/resources/dump/system.png")
    brs example(Sig) = {
        agents = [$system],
        rules = [$refillCoffee]
    }
    execute($example)

    // val system2(Sig) = { $student | $vendingMachine2 }
    // export($system, as=png, resourcePath="file:src/test/resources/dump/system.png")
    // brs example2(Sig) = {
    //     agents = [$system2],
    //     rules = [$refillCoffee2]
    // }
    // execute($example2)

    // val system3(Sig) = { $student | $vendingMachine3 }
    // export($system, as=png, resourcePath="file:src/test/resources/dump/system.png")
    // brs example3(Sig) = {
    //     agents = [$system3],
    //     rules = [$refillCoffee3]
    // }
    // execute($example3)
}

val student(Sig): PHD = {
    Wallet - (Coin | Coin)
}

val vendingMachine(Sig): VM = {
    Tresor-brn() | Button1-brn() | Button2-brn() | Container - (Coffee | Coffee) | Container - (Tea | Tea)
}

val vendingMachine2(Sig): VM = {
    Tresor-brn() | Button1-brn() | Button2-brn() | Container - brn() | Container - (Tea | Tea)
}

val vendingMachine3(Sig): VM = {
    Tresor-brn() | Button1-brn() | Button2-brn() | Container - brn() | Container - brn()
}


// One container already contains coffee
react refillCoffee(Sig) = {
    Container - (Coffee | id(1))
}, {
    Container - (Coffee | Coffee | id(1))
}

// One container is empty, and one contains already tea
react refillCoffee2(Sig) = {
    Container | Container - (Tea | id(1))
}, {
    Container - (Coffee) | Container - (Tea | id(1))
}

// Both containers are empty -> choose any
react refillCoffee3(Sig) = {
    Container | Container
}, {
    Container - (Coffee) | Container
}